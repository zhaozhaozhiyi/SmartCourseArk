var e=Object.defineProperty,n=(n,t,r)=>((n,t,r)=>t in n?e(n,t,{enumerable:!0,configurable:!0,writable:!0,value:r}):n[t]=r)(n,"symbol"!=typeof t?t+"":t,r),t=(e,n,t)=>new Promise((r,s)=>{var i=e=>{try{c(t.next(e))}catch(n){s(n)}},o=e=>{try{c(t.throw(e))}catch(n){s(n)}},c=e=>e.done?r(e.value):Promise.resolve(e.value).then(i,o);c((t=t.apply(e,n)).next())});import{c as r}from"./course-Ba9mJaVD.js";class s{constructor(){n(this,"kimiAPI",r())}parseDocument(e){return t(this,null,function*(){try{const n=yield this.kimiAPI.uploadFile(e),t=yield this.kimiAPI.getFileContent(n.id),r=yield this.analyzeDocument(t,e.name);return{fileId:n.id,content:t,analysis:r}}catch(n){throw console.error("文档解析失败:",n),new Error(`文档解析失败: ${n instanceof Error?n.message:"未知错误"}`)}})}analyzeDocument(e,n){return t(this,null,function*(){const t=`\n请分析以下文档内容，并提取关键信息：\n\n文档名称：${n}\n文档内容：\n${e.substring(0,8e3)} ${e.length>8e3?"...(内容过长，已截取前8000字符)":""}\n\n请按照以下JSON格式返回分析结果：\n{\n  "summary": "文档摘要（100-200字）",\n  "keyPoints": ["关键点1", "关键点2", "关键点3", "关键点4", "关键点5"],\n  "suggestedChapters": [\n    {\n      "title": "章节标题",\n      "description": "章节描述（50-100字）",\n      "keyTopics": ["主题1", "主题2", "主题3"]\n    }\n  ],\n  "difficulty": "beginner|intermediate|advanced",\n  "estimatedDuration": 预计学习时长（分钟）\n}\n\n要求：\n1. 根据文档内容确定合适的难度级别\n2. 章节划分要合理，每章包含3-8个章节\n3. 预计时长要符合实际学习需要\n4. 关键点要突出文档的核心内容\n`,r=(yield this.kimiAPI.chat({model:"moonshot-v1-128k",messages:[{role:"system",content:"你是 Kimi，由 Moonshot AI 提供的人工智能助手，你更擅长中文和英文的对话。你会为用户提供安全，有帮助，准确的回答。请严格按照JSON格式返回结果。"},{role:"user",content:t}],temperature:.3})).choices[0].message.content;try{let e;try{e=JSON.parse(r)}catch(s){const n=r.match(/\{[\s\S]*\}/);if(!n)throw new Error("无法解析AI返回的分析结果");e=JSON.parse(n[0])}if(!e.summary||!e.keyPoints||!e.suggestedChapters)throw new Error("AI返回的分析结果格式不正确");return e}catch(i){return console.error("解析AI分析结果失败:",i),console.error("AI返回内容:",r),{summary:"文档内容分析完成，但AI返回格式有误，请手动调整课程大纲。",keyPoints:["文档内容需要进一步分析"],suggestedChapters:[{title:"第一章",description:"请根据文档内容调整章节内容",keyTopics:["主题1","主题2"]}],difficulty:"intermediate",estimatedDuration:60}}})}generateCourseOutlineStream(e,n,r,s){return t(this,null,function*(){const e=`\n基于以下文档分析结果，为课程"${n}"生成详细的课程大纲：\n\n文档分析结果：\n${JSON.stringify(r,null,2)}\n\n请按照以下JSON格式生成课程大纲：\n{\n  "courseTitle": "课程标题",\n  "courseDescription": "课程描述（200-300字）",\n  "chapters": [\n    {\n      "title": "章节标题",\n      "description": "章节描述（100-150字）",\n      "content": "章节详细内容（包含具体的知识点、例子和学习要点）",\n      "duration": 预计学习时长（分钟）,\n      "order": 章节顺序（从1开始）\n    }\n  ],\n  "learningObjectives": ["学习目标1", "学习目标2", "学习目标3", "学习目标4"],\n  "prerequisites": ["前置要求1", "前置要求2"]\n}\n\n要求：\n1. 课程大纲要结构清晰，逻辑合理\n2. 每个章节的内容要详细，包含具体的学习要点\n3. 学习目标要明确，可衡量\n4. 章节数量控制在5-10个之间\n5. 总时长要合理，符合学习规律\n`;let t="";yield this.kimiAPI.chatStream({model:"moonshot-v1-128k",messages:[{role:"system",content:"你是 Kimi，由 Moonshot AI 提供的人工智能助手，你更擅长中文和英文的对话。你会为用户提供安全，有帮助，准确的回答。请严格按照JSON格式返回结果。"},{role:"user",content:e}],temperature:.4},e=>{t+=e,s(e)});try{let e;try{e=JSON.parse(t)}catch(i){const n=t.match(/\{[\s\S]*\}/);if(!n)throw new Error("无法解析AI返回的课程大纲");e=JSON.parse(n[0])}if(!e.courseTitle||!e.chapters||!Array.isArray(e.chapters))throw new Error("AI返回的课程大纲格式不正确");return e}catch(o){return console.error("解析AI课程大纲失败:",o),console.error("AI返回内容:",t),{courseTitle:n||"智能课程",courseDescription:r.summary,chapters:r.suggestedChapters.map((e,n)=>{const t=Math.max(30,Math.round(r.estimatedDuration/r.suggestedChapters.length));return{title:e.title,description:e.description,content:`本章节将学习${e.keyTopics.join("、")}等内容。\n\n具体包括：\n${e.keyTopics.map(e=>`- ${e}`).join("\n")}\n\n学习要点：\n- 理解核心概念\n- 掌握基本方法\n- 能够实际应用`,duration:`${t}分钟`,durationMinutes:t,order:n+1}}),learningObjectives:["掌握课程核心知识点","能够理解并应用所学内容","具备解决实际问题的能力"],prerequisites:["基本的学习能力和理解能力"]}}})}generateCourseOutline(e,n,r){return t(this,null,function*(){const e=`\n基于以下文档分析结果，为课程"${n}"生成详细的课程大纲：\n\n文档分析结果：\n${JSON.stringify(r,null,2)}\n\n请按照以下JSON格式生成课程大纲：\n{\n  "courseTitle": "课程标题",\n  "courseDescription": "课程描述（200-300字）",\n  "chapters": [\n    {\n      "title": "章节标题",\n      "description": "章节描述（100-150字）",\n      "content": "章节详细内容（包含具体的知识点、例子和学习要点）",\n      "duration": 预计学习时长（分钟）,\n      "order": 章节顺序（从1开始）\n    }\n  ],\n  "learningObjectives": ["学习目标1", "学习目标2", "学习目标3", "学习目标4"],\n  "prerequisites": ["前置要求1", "前置要求2"]\n}\n\n要求：\n1. 课程大纲要结构清晰，逻辑合理\n2. 每个章节的内容要详细，包含具体的学习要点\n3. 学习目标要明确，可衡量\n4. 章节数量控制在5-10个之间\n5. 总时长要合理，符合学习规律\n`,t=(yield this.kimiAPI.chat({model:"moonshot-v1-128k",messages:[{role:"system",content:"你是 Kimi，由 Moonshot AI 提供的人工智能助手，你更擅长中文和英文的对话。你会为用户提供安全，有帮助，准确的回答。请严格按照JSON格式返回结果。"},{role:"user",content:e}],temperature:.4})).choices[0].message.content;try{let e;try{e=JSON.parse(t)}catch(s){const n=t.match(/\{[\s\S]*\}/);if(!n)throw new Error("无法解析AI返回的课程大纲");e=JSON.parse(n[0])}if(!e.courseTitle||!e.chapters||!Array.isArray(e.chapters))throw new Error("AI返回的课程大纲格式不正确");return e}catch(i){return console.error("解析AI课程大纲失败:",i),console.error("AI返回内容:",t),{courseTitle:n||"智能课程",courseDescription:r.summary,chapters:r.suggestedChapters.map((e,n)=>{const t=Math.max(30,Math.round(r.estimatedDuration/r.suggestedChapters.length));return{title:e.title,description:e.description,content:`本章节将学习${e.keyTopics.join("、")}等内容。\n\n具体包括：\n${e.keyTopics.map(e=>`- ${e}`).join("\n")}\n\n学习要点：\n- 理解核心概念\n- 掌握基本方法\n- 能够实际应用`,duration:`${t}分钟`,durationMinutes:t,order:n+1}}),learningObjectives:["掌握课程核心知识点","能够理解并应用所学内容","具备解决实际问题的能力"],prerequisites:["基本的学习能力和理解能力"]}}})}generateCourseJsonStream(e,n){return t(this,null,function*(){try{const t=yield this.kimiAPI.uploadFile(e),r=`\n请基于以下文档内容，生成课程信息的JSON格式。请严格按照以下JSON格式输出，不要添加任何其他内容，不要修改格式，直接输出：\n\n{\n  "courseTitle": "课程标题",\n  "courseDescription": "课程描述（200-300字）",\n  "difficulty": "初级/中级/高级",\n  "learningObjectives": [\n    "学习目标1",\n    "学习目标2", \n    "学习目标3",\n    "学习目标4",\n    "学习目标5"\n  ],\n  "chapters": [\n    {\n      "order": 1,\n      "title": "章节标题",\n      "description": "章节描述（100-150字）",\n      "duration": "30分钟",\n      "durationMinutes": 30,\n      "content": "章节详细内容"\n    }\n  ]\n}\n\n要求：\n1. 根据文档内容确定合适的难度级别\n2. 章节划分要合理，每章包含3-8个章节\n3. 预计时长要符合实际学习需要\n4. 关键点要突出文档的核心内容\n5. 学习目标要明确，可衡量\n6. 章节数量控制在5-10个之间\n7. 总时长要合理，符合学习规律\n\n文档内容：\n${yield this.kimiAPI.getFileContent(t.id)}\n`;let s="";return yield this.kimiAPI.chatStream({model:"moonshot-v1-128k",messages:[{role:"user",content:r}]},e=>{s+=e,n(s,!1)}),n(s,!0),this.parseJsonToOutline(s)}catch(t){throw console.error("流式生成课程JSON失败:",t),t}})}parseJsonToOutline(e){try{let n=e.trim();n.startsWith("```json")?n=n.replace(/^```json\s*/,"").replace(/\s*```$/,""):n.startsWith("```")&&(n=n.replace(/^```\s*/,"").replace(/\s*```$/,""));const t=JSON.parse(n);return{courseTitle:t.courseTitle||"未命名课程",courseDescription:t.courseDescription||"课程描述",difficulty:t.difficulty||"中级",chapters:t.chapters||[],learningObjectives:t.learningObjectives||[],prerequisites:t.prerequisites||[]}}catch(n){return console.error("解析JSON失败:",n),console.error("JSON内容:",e),{courseTitle:"解析失败",courseDescription:"JSON解析失败，请检查格式",difficulty:"中级",chapters:[],learningObjectives:[],prerequisites:[]}}}generateCourseWithMarkdownStream(e,n){return t(this,null,function*(){try{const t=yield this.kimiAPI.getFileContent(e),r=`\n请基于以下文档内容，生成课程信息的Markdown格式。请严格按照以下格式输出，不要添加任何其他内容，不要修改格式，直接输出：\n\n# 课程标题\n[在这里生成课程标题]\n\n## 课程描述\n[在这里生成课程描述，200-300字]\n\n## 难度级别\n[初级/中级/高级]\n\n## 学习目标\n- [第一个学习目标]\n- [第二个学习目标]\n- [第三个学习目标]\n- [第四个学习目标]\n- [第五个学习目标]\n\n## 课程章节\n\n### 第1章：[章节标题]\n**描述：** [章节描述，100-150字]\n**时长：** [预计时长]分钟\n\n### 第2章：[章节标题]\n**描述：** [章节描述，100-150字]\n**时长：** [预计时长]分钟\n\n### 第3章：[章节标题]\n**描述：** [章节描述，100-150字]\n**时长：** [预计时长]分钟\n\n### 第4章：[章节标题]\n**描述：** [章节描述，100-150字]\n**时长：** [预计时长]分钟\n\n更多章节...\n\n文档内容：\n${t.substring(0,5e4)} ${t.length>5e4?"...(内容过长，已截取前50000字符)":""}\n`;let s="";return yield this.kimiAPI.chatStream({model:"moonshot-v1-128k",messages:[{role:"system",content:"你是 Kimi，由 Moonshot AI 提供的人工智能助手。请严格按照用户要求的Markdown格式输出课程信息。必须完全按照提供的模板格式输出，不要添加任何额外的内容、说明或解释。"},{role:"user",content:r}],temperature:.3},e=>{s+=e,n(s,!1)}),n(s,!0),this.parseMarkdownToOutline(s)}catch(t){throw console.error("流式生成课程Markdown失败:",t),t}})}parseMarkdownToOutline(e){const n=e.match(new RegExp("#\\s*课程标题\\s*\\n(.+?)(?=\\n##\\s*课程描述)","s")),t=n?n[1].trim():"未命名课程",r=e.match(new RegExp("##\\s*课程描述\\s*\\n(.+?)(?=\\n##\\s*难度级别)","s")),s=r?r[1].trim():"课程描述",i=e.match(new RegExp("##\\s*难度级别\\s*\\n(.+?)(?=\\n##\\s*学习目标)","s")),o=i?i[1].trim():"中级",c=e.match(new RegExp("##\\s*学习目标\\s*\\n(.+?)(?=\\n##|$)","s")),a=c?c[1].split("\n").filter(e=>e.trim().startsWith("- ")).map(e=>e.replace(/^-\s*/,"").trim()).filter(e=>e):[],l=[],u=new RegExp("###\\s*第(\\d+)章：\\s*\\[?([^\\n\\]]+?)\\]?\\s*[\\r\\n\\s]*\\*\\*描述：\\*\\*\\s*([^\\n\\r]+?)\\s*[\\r\\n\\s]*\\*\\*时长：\\*\\*\\s*([^\\n\\r]+?)(?=[\\r\\n]|$)","gs");let p;for(console.log("开始解析章节，Markdown内容:",e.substring(0,500)+"..."),console.log("章节正则表达式:",u);null!==(p=u.exec(e));){console.log("匹配到章节:",p);const e=p[4].trim(),n=e.match(/(\d+)/);l.push({order:parseInt(p[1]),title:p[2].trim(),description:p[3].trim(),duration:e,durationMinutes:n?parseInt(n[1]):0,content:""})}if(0===l.length){console.log("主正则表达式未匹配到章节，尝试备用方法...");const n=new RegExp("###\\s*第(\\d+)章[：:]\\s*(.+?)\\s*\\n.*?\\*\\*描述[：:]\\*\\*\\s*(.+?)\\s*\\n.*?\\*\\*时长[：:]\\*\\*\\s*(.+?)(?=\\n|$)","gs");let t;for(;null!==(t=n.exec(e));){console.log("备用方法匹配到章节:",t);const e=t[4].trim(),n=e.match(/(\d+)/);l.push({order:parseInt(t[1]),title:t[2].trim(),description:t[3].trim(),duration:e,durationMinutes:n?parseInt(n[1]):0,content:""})}}return console.log("最终解析到的章节数量:",l.length),{courseTitle:t,courseDescription:s,difficulty:o,chapters:l,learningObjectives:a,prerequisites:[]}}parseFinalOutline(e){const n=e.match(new RegExp("【课程标题】\\s*\\n(.*?)(?=\\n【|$)","s")),t=e.match(new RegExp("【课程描述】\\s*\\n(.*?)(?=\\n【|$)","s")),r=e.match(new RegExp("【难度级别】\\s*\\n(.*?)(?=\\n【|$)","s")),s=e.match(new RegExp("【学习目标】\\s*\\n(.*?)(?=\\n【|$)","s")),i=n?n[1].trim():"未命名课程",o=t?t[1].trim():"课程描述",c=r?r[1].trim():"中级",a=s?s[1].split("\n").filter(e=>e.trim().match(/^\d+\./)).map(e=>e.replace(/^\d+\.\s*/,"").trim()).filter(e=>e):[],l=[],u=/第(\d+)章：([^\n]+)\n([^\n]+)\n\[预计时长：(\d+)分钟\]/g;let p;for(;null!==(p=u.exec(e));)l.push({order:parseInt(p[1]),title:p[2].trim(),description:p[3].trim(),duration:`${p[4]}分钟`,durationMinutes:parseInt(p[4]),content:""});return{courseTitle:i,courseDescription:o,difficulty:c,chapters:l,learningObjectives:a,prerequisites:[]}}getDocumentSummary(e){return t(this,null,function*(){try{const n=yield this.kimiAPI.getFileContent(e),t=`\n请为以下文档内容生成一个简洁的摘要（100-200字）：\n\n${n.substring(0,4e3)} ${n.length>4e3?"...(内容过长，已截取前4000字符)":""}\n\n要求：\n1. 摘要要准确概括文档的主要内容\n2. 语言要简洁明了\n3. 突出文档的核心价值和要点\n`;return(yield this.kimiAPI.chat({model:"moonshot-v1-128k",messages:[{role:"system",content:"你是 Kimi，由 Moonshot AI 提供的人工智能助手，你更擅长中文和英文的对话。你会为用户提供安全，有帮助，准确的回答。"},{role:"user",content:t}],temperature:.3})).choices[0].message.content}catch(n){return console.error("获取文档摘要失败:",n),"无法生成文档摘要，请查看文档内容。"}})}enrichChapterContent(e,n,r,s){return t(this,null,function*(){try{const t=`请为课程"${e}"的章节"${n}"生成详细的学习内容。\n\n章节描述：${r}\n\n请生成包含以下要素的详细学习内容：\n1. 章节概述和学习目标\n2. 核心知识点和概念解释\n3. 详细的讲解内容（包含实例和案例）\n4. 重点难点分析\n5. 学习要点总结\n6. 思考题或练习题\n\n要求：\n- 内容要详细、易懂、有层次\n- 使用Markdown格式\n- 内容长度控制在2000-5000字\n- 适合在线学习阅读\n- 语言要专业但通俗易懂\n\n${s?`\n\n参考文档ID: ${s}`:""}`;return(yield this.kimiAPI.chat({messages:[{role:"user",content:t}],model:"moonshot-v1-128k",temperature:.7})).choices[0].message.content||""}catch(t){throw console.error("生成章节详细内容失败:",t),new Error(`生成章节详细内容失败: ${t instanceof Error?t.message:"未知错误"}`)}})}extractChapterContentFromDocument(e,n){try{const t=[new RegExp(`(?:^|\n)(?:#{2,3}\\s*${this.escapeRegExp(n)}.*?)(?=\n(?:#{1,3}\\s|$))`,"gs"),new RegExp(`(?:^|\n)(?:第\\d+章\\s*${this.escapeRegExp(n)}.*?)(?=\n(?:第\\d+章|#{1,3}\\s|$))`,"gs"),new RegExp(`(?:^|\n)(?:\\d+\\.\\s*${this.escapeRegExp(n)}.*?)(?=\n(?:\\d+\\.|#{1,3}\\s|$))`,"gs")];for(const r of t){const t=e.match(r);if(t&&t[0]){let e=t[0].trim();return e=e.replace(new RegExp(`^#{1,3}\\s*${this.escapeRegExp(n)}.*$`,"m"),""),e=e.replace(new RegExp(`^第\\d+章\\s*${this.escapeRegExp(n)}.*$`,"m"),""),e=e.replace(new RegExp(`^\\d+\\.\\s*${this.escapeRegExp(n)}.*$`,"m"),""),e.trim()}}return""}catch(t){return console.error("提取章节内容失败:",t),""}}escapeRegExp(e){return e.replace(/[.*+?^${}()|[\]\\]/g,"\\$&")}}export{s as D};
