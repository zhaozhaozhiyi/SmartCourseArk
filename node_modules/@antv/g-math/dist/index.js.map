{"version":3,"file":"index.js","sources":["../src/util.ts","../src/ellipse.ts","../src/arc.ts","../src/bezier.ts","../src/line.ts","../src/cubic.ts","../src/segments.ts","../src/polyline.ts","../src/polygon.ts","../src/quadratic.ts"],"sourcesContent":["import type { BBox } from './types';\n\nexport function distance(x1: number, y1: number, x2: number, y2: number) {\n  const dx = x1 - x2;\n  const dy = y1 - y2;\n  return Math.sqrt(dx * dx + dy * dy);\n}\n\nexport function getBBoxByArray(xArr: number[], yArr: number[]): BBox {\n  const minX = Math.min(...xArr);\n  const minY = Math.min(...yArr);\n  const maxX = Math.max(...xArr);\n  const maxY = Math.max(...yArr);\n  return {\n    x: minX,\n    y: minY,\n    width: maxX - minX,\n    height: maxY - minY,\n  };\n}\n\nexport function getBBoxRange(x1: number, y1: number, x2: number, y2: number) {\n  return {\n    minX: Math.min(x1, x2),\n    maxX: Math.max(x1, x2),\n    minY: Math.min(y1, y2),\n    maxY: Math.max(y1, y2),\n  };\n}\n\nexport function piMod(angle: number) {\n  return (angle + Math.PI * 2) % (Math.PI * 2);\n}\n","import type { BBox, Point } from './types';\nimport { distance, piMod } from './util';\n\nfunction copysign(v1: number, v2: number) {\n  const absv = Math.abs(v1);\n  return v2 > 0 ? absv : absv * -1;\n}\n\nexport function box(x: number, y: number, rx: number, ry: number): BBox {\n  return {\n    x: x - rx,\n    y: y - ry,\n    width: rx * 2,\n    height: ry * 2,\n  };\n}\nexport function length(x: number, y: number, rx: number, ry: number) {\n  return Math.PI * (3 * (rx + ry) - Math.sqrt((3 * rx + ry) * (rx + 3 * ry)));\n}\nexport function nearestPoint(\n  x: number,\n  y: number,\n  rx: number,\n  ry: number,\n  x0: number,\n  y0: number,\n) {\n  const a = rx;\n  const b = ry;\n  // 假如椭圆半径为0则返回圆心\n  if (a === 0 || b === 0) {\n    return {\n      x,\n      y,\n    };\n  }\n  // 转换成 0， 0 为中心的椭圆计算\n  const relativeX = x0 - x;\n  const relativeY = y0 - y;\n  const px = Math.abs(relativeX);\n  const py = Math.abs(relativeY);\n  const squareA = a * a;\n  const squareB = b * b;\n  // const angle0 = Math.atan2(relativeY, relativeX);\n  let t = Math.PI / 4;\n  let nearestX = 0; // 椭圆上的任一点\n  let nearestY = 0;\n  // 迭代 4 次\n  for (let i = 0; i < 4; i++) {\n    nearestX = a * Math.cos(t);\n    nearestY = b * Math.sin(t);\n\n    const ex = ((squareA - squareB) * Math.cos(t) ** 3) / a;\n    const ey = ((squareB - squareA) * Math.sin(t) ** 3) / b;\n    const rx1 = nearestX - ex;\n    const ry1 = nearestY - ey;\n\n    const qx = px - ex;\n    const qy = py - ey;\n    const r = Math.hypot(ry1, rx1);\n    const q = Math.hypot(qy, qx);\n\n    const delta_c = r * Math.asin((rx1 * qy - ry1 * qx) / (r * q));\n    const delta_t =\n      delta_c /\n      Math.sqrt(squareA + squareB - nearestX * nearestX - nearestY * nearestY);\n\n    t += delta_t;\n    t = Math.min(Math.PI / 2, Math.max(0, t));\n  }\n\n  return {\n    x: x + copysign(nearestX, relativeX),\n    y: y + copysign(nearestY, relativeY),\n  };\n}\nexport function pointDistance(\n  x: number,\n  y: number,\n  rx: number,\n  ry: number,\n  x0: number,\n  y0: number,\n) {\n  const np = nearestPoint(x, y, rx, ry, x0, y0);\n  return distance(np.x, np.y, x0, y0);\n}\nexport function pointAt(\n  x: number,\n  y: number,\n  rx: number,\n  ry: number,\n  t: number,\n): Point {\n  const angle = 2 * Math.PI * t; // 按照角度进行计算，而不按照周长计算\n  return {\n    x: x + rx * Math.cos(angle),\n    y: y + ry * Math.sin(angle),\n  };\n}\nexport function tangentAngle(\n  x: number,\n  y: number,\n  rx: number,\n  ry: number,\n  t: number,\n) {\n  const angle = 2 * Math.PI * t; // 按照角度进行计算，而不按照周长计算\n  // 直接使用 x,y 的导数计算， x' = -rx * sin(t); y' = ry * cos(t);\n  const tangentAngle = Math.atan2(ry * Math.cos(angle), -rx * Math.sin(angle));\n  // 也可以使用指定点的切线方程计算，成本有些高\n  // const point = this.pointAt(0, 0, rx, ry, t); // 椭圆的切线同椭圆的中心不相关\n  // let tangentAngle = -1 * Math.atan((ry * ry * point.x) / (rx * rx * point.y));\n  // if (angle >= 0 && angle <= Math.PI) {\n  //   tangentAngle += Math.PI;\n  // }\n\n  return piMod(tangentAngle);\n}\n","import { nearestPoint as ellipseNearestPoint } from './ellipse';\nimport type { BBox, Point } from './types';\nimport { distance, piMod } from './util';\n\n// 偏导数 x\nfunction derivativeXAt(\n  cx: number,\n  cy: number,\n  rx: number,\n  ry: number,\n  xRotation: number,\n  startAngle: number,\n  endAngle: number,\n  angle: number,\n) {\n  return (\n    -1 * rx * Math.cos(xRotation) * Math.sin(angle) -\n    ry * Math.sin(xRotation) * Math.cos(angle)\n  );\n}\n\n// 偏导数 y\nfunction derivativeYAt(\n  cx: number,\n  cy: number,\n  rx: number,\n  ry: number,\n  xRotation: number,\n  startAngle: number,\n  endAngle: number,\n  angle: number,\n) {\n  return (\n    -1 * rx * Math.sin(xRotation) * Math.sin(angle) +\n    ry * Math.cos(xRotation) * Math.cos(angle)\n  );\n}\n\n// x 的极值\nfunction xExtrema(rx: number, ry: number, xRotation: number) {\n  return Math.atan((-ry / rx) * Math.tan(xRotation));\n}\n\n// y 的极值\nfunction yExtrema(rx: number, ry: number, xRotation: number) {\n  return Math.atan(ry / (rx * Math.tan(xRotation)));\n}\n\n// 根据角度求 x 坐标\nfunction xAt(\n  cx: number,\n  cy: number,\n  rx: number,\n  ry: number,\n  xRotation: number,\n  angle: number,\n) {\n  return (\n    rx * Math.cos(xRotation) * Math.cos(angle) -\n    ry * Math.sin(xRotation) * Math.sin(angle) +\n    cx\n  );\n}\n\n// 根据角度求 y 坐标\nfunction yAt(\n  cx: number,\n  cy: number,\n  rx: number,\n  ry: number,\n  xRotation: number,\n  angle: number,\n) {\n  return (\n    rx * Math.sin(xRotation) * Math.cos(angle) +\n    ry * Math.cos(xRotation) * Math.sin(angle) +\n    cy\n  );\n}\n\n// 获取点在椭圆上的角度\nfunction getAngle(rx: number, ry: number, x0: number, y0: number) {\n  const angle = Math.atan2(y0 * rx, x0 * ry);\n  // 转换到 0 - 2PI 内\n  return (angle + Math.PI * 2) % (Math.PI * 2);\n}\n\n// 根据角度获取，x,y\nfunction getPoint(rx: number, ry: number, angle: number): Point {\n  return {\n    x: rx * Math.cos(angle),\n    y: ry * Math.sin(angle),\n  };\n}\n\n// 旋转\nfunction rotate(x: number, y: number, angle: number) {\n  const cos = Math.cos(angle);\n  const sin = Math.sin(angle);\n  return [x * cos - y * sin, x * sin + y * cos];\n}\n\nexport function box(\n  cx: number,\n  cy: number,\n  rx: number,\n  ry: number,\n  xRotation: number,\n  startAngle: number,\n  endAngle: number,\n): BBox {\n  const xDim = xExtrema(rx, ry, xRotation);\n  let minX = Infinity;\n  let maxX = -Infinity;\n  const xs = [startAngle, endAngle];\n  for (let i = -Math.PI * 2; i <= Math.PI * 2; i += Math.PI) {\n    const xAngle = xDim + i;\n    if (startAngle < endAngle) {\n      if (startAngle < xAngle && xAngle < endAngle) {\n        xs.push(xAngle);\n      }\n    } else if (endAngle < xAngle && xAngle < startAngle) {\n      xs.push(xAngle);\n    }\n  }\n\n  for (let i = 0; i < xs.length; i++) {\n    const x = xAt(cx, cy, rx, ry, xRotation, xs[i]);\n    if (x < minX) {\n      minX = x;\n    }\n    if (x > maxX) {\n      maxX = x;\n    }\n  }\n\n  const yDim = yExtrema(rx, ry, xRotation);\n  let minY = Infinity;\n  let maxY = -Infinity;\n  const ys = [startAngle, endAngle];\n  for (let i = -Math.PI * 2; i <= Math.PI * 2; i += Math.PI) {\n    const yAngle = yDim + i;\n    if (startAngle < endAngle) {\n      if (startAngle < yAngle && yAngle < endAngle) {\n        ys.push(yAngle);\n      }\n    } else if (endAngle < yAngle && yAngle < startAngle) {\n      ys.push(yAngle);\n    }\n  }\n\n  for (let i = 0; i < ys.length; i++) {\n    const y = yAt(cx, cy, rx, ry, xRotation, ys[i]);\n    if (y < minY) {\n      minY = y;\n    }\n    if (y > maxY) {\n      maxY = y;\n    }\n  }\n\n  return {\n    x: minX,\n    y: minY,\n    width: maxX - minX,\n    height: maxY - minY,\n  };\n}\n\nexport function nearestPoint(\n  cx: number,\n  cy: number,\n  rx: number,\n  ry: number,\n  xRotation: number,\n  startAngle: number,\n  endAngle: number,\n  x0: number,\n  y0: number,\n) {\n  // 将最近距离问题转换成到椭圆中心 0,0 没有旋转的椭圆问题\n  const relativeVector = rotate(x0 - cx, y0 - cy, -xRotation);\n  const [x1, y1] = relativeVector;\n  // 计算点到椭圆的最近的点\n  let relativePoint = ellipseNearestPoint(0, 0, rx, ry, x1, y1);\n  // 获取点在椭圆上的角度\n  const angle = getAngle(rx, ry, relativePoint.x, relativePoint.y);\n  // 点没有在圆弧上\n  if (angle < startAngle) {\n    // 小于起始圆弧\n    relativePoint = getPoint(rx, ry, startAngle);\n  } else if (angle > endAngle) {\n    // 大于结束圆弧\n    relativePoint = getPoint(rx, ry, endAngle);\n  }\n  // 旋转到 xRotation 的角度\n  const vector = rotate(relativePoint.x, relativePoint.y, xRotation);\n  return {\n    x: vector[0] + cx,\n    y: vector[1] + cy,\n  };\n}\n\nexport function pointDistance(\n  cx: number,\n  cy: number,\n  rx: number,\n  ry: number,\n  xRotation: number,\n  startAngle: number,\n  endAngle: number,\n  x0: number,\n  y0: number,\n) {\n  const np = nearestPoint(\n    cx,\n    cy,\n    rx,\n    ry,\n    xRotation,\n    startAngle,\n    endAngle,\n    x0,\n    y0,\n  );\n  return distance(np.x, np.y, x0, y0);\n}\n\nexport function pointAt(\n  cx: number,\n  cy: number,\n  rx: number,\n  ry: number,\n  xRotation: number,\n  startAngle: number,\n  endAngle: number,\n  t: number,\n): Point {\n  const angle = (endAngle - startAngle) * t + startAngle;\n  return {\n    x: xAt(cx, cy, rx, ry, xRotation, angle),\n    y: yAt(cx, cy, rx, ry, xRotation, angle),\n  };\n}\n\nexport function tangentAngle(\n  cx: number,\n  cy: number,\n  rx: number,\n  ry: number,\n  xRotation: number,\n  startAngle: number,\n  endAngle: number,\n  t: number,\n) {\n  const angle = (endAngle - startAngle) * t + startAngle;\n  const dx = derivativeXAt(\n    cx,\n    cy,\n    rx,\n    ry,\n    xRotation,\n    startAngle,\n    endAngle,\n    angle,\n  );\n  const dy = derivativeYAt(\n    cx,\n    cy,\n    rx,\n    ry,\n    xRotation,\n    startAngle,\n    endAngle,\n    angle,\n  );\n  return piMod(Math.atan2(dy, dx));\n}\n","import { distance } from './util';\nimport type { Point, PointTuple } from './types';\n\nconst EPSILON = 0.0001;\n/**\n * 使用牛顿切割法求最近的点\n * @param {number[]} xArr      点的 x 数组\n * @param {number[]} yArr      点的 y 数组\n * @param {number}   x         指定的点 x\n * @param {number}   y         指定的点 y\n * @param {Function} tCallback 差值函数\n */\nexport function nearestPoint(\n  xArr: number[],\n  yArr: number[],\n  x: number,\n  y: number,\n  tCallback: (...arr: number[]) => number,\n  length?: number,\n): Point {\n  let t = -1;\n  let d = Infinity;\n  const v0: PointTuple = [x, y];\n\n  let segNum = 20;\n  if (length && length > 200) {\n    segNum = length / 10;\n  }\n  const increaseRate = 1 / segNum;\n\n  let interval = increaseRate / 10;\n\n  for (let i = 0; i <= segNum; i++) {\n    const _t = i * increaseRate;\n    const v1: PointTuple = [\n      tCallback(...xArr.concat([_t])),\n      tCallback(...yArr.concat([_t])),\n    ];\n\n    const d1 = distance(v0[0], v0[1], v1[0], v1[1]);\n    if (d1 < d) {\n      t = _t;\n      d = d1;\n    }\n  }\n  // 提前终止\n  if (t === 0) {\n    return {\n      x: xArr[0],\n      y: yArr[0],\n    };\n  }\n  if (t === 1) {\n    const count = xArr.length;\n    return {\n      x: xArr[count - 1],\n      y: yArr[count - 1],\n    };\n  }\n  d = Infinity;\n\n  for (let i = 0; i < 32; i++) {\n    if (interval < EPSILON) {\n      break;\n    }\n\n    const prev = t - interval;\n    const next = t + interval;\n\n    const v1 = [\n      tCallback(...xArr.concat([prev])),\n      tCallback(...yArr.concat([prev])),\n    ];\n\n    const d1 = distance(v0[0], v0[1], v1[0], v1[1]);\n    if (prev >= 0 && d1 < d) {\n      t = prev;\n      d = d1;\n    } else {\n      const v2 = [\n        tCallback(...xArr.concat([next])),\n        tCallback(...yArr.concat([next])),\n      ];\n      const d2 = distance(v0[0], v0[1], v2[0], v2[1]);\n      if (next <= 1 && d2 < d) {\n        t = next;\n        d = d2;\n      } else {\n        interval *= 0.5;\n      }\n    }\n  }\n\n  return {\n    x: tCallback(...xArr.concat([t])),\n    y: tCallback(...yArr.concat([t])),\n  };\n}\n\n// 近似求解 https://community.khronos.org/t/3d-cubic-bezier-segment-length/62363/2\nexport function snapLength(xArr: number[], yArr: number[]) {\n  let totalLength = 0;\n  const count = xArr.length;\n  for (let i = 0; i < count; i++) {\n    const x = xArr[i];\n    const y = yArr[i];\n    const nextX = xArr[(i + 1) % count];\n    const nextY = yArr[(i + 1) % count];\n    totalLength += distance(x, y, nextX, nextY);\n  }\n  return totalLength / 2;\n}\n","import { vec2 } from 'gl-matrix';\nimport type { BBox, Point } from './types';\nimport { distance, getBBoxByArray } from './util';\n\nexport function box(x1: number, y1: number, x2: number, y2: number): BBox {\n  return getBBoxByArray([x1, x2], [y1, y2]);\n}\n\nexport function length(x1: number, y1: number, x2: number, y2: number) {\n  return distance(x1, y1, x2, y2);\n}\n\nexport function pointAt(\n  x1: number,\n  y1: number,\n  x2: number,\n  y2: number,\n  t: number,\n): Point {\n  return {\n    x: (1 - t) * x1 + t * x2,\n    y: (1 - t) * y1 + t * y2,\n  };\n}\n\nexport function pointDistance(\n  x1: number,\n  y1: number,\n  x2: number,\n  y2: number,\n  x: number,\n  y: number,\n): number {\n  // 投影距离 x1, y1 的向量，假设 p, p1, p2 三个点，投影点为 a\n  // p1a = p1p.p1p2/|p1p2| * (p1p 的单位向量)\n  const cross = (x2 - x1) * (x - x1) + (y2 - y1) * (y - y1);\n  if (cross < 0) {\n    return distance(x1, y1, x, y);\n  }\n  const lengthSquare = (x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1);\n  if (cross > lengthSquare) {\n    return distance(x2, y2, x, y);\n  }\n  return pointToLine(x1, y1, x2, y2, x, y);\n}\n\nexport function pointToLine(\n  x1: number,\n  y1: number,\n  x2: number,\n  y2: number,\n  x: number,\n  y: number,\n) {\n  const d: [number, number] = [x2 - x1, y2 - y1];\n  // 如果端点相等，则判定点到点的距离\n  if (vec2.exactEquals(d, [0, 0])) {\n    return Math.sqrt((x - x1) * (x - x1) + (y - y1) * (y - y1));\n  }\n  const u: [number, number] = [-d[1], d[0]];\n  vec2.normalize(u, u);\n  const a: [number, number] = [x - x1, y - y1];\n  return Math.abs(vec2.dot(a, u));\n}\n\nexport function tangentAngle(x1: number, y1: number, x2: number, y2: number) {\n  return Math.atan2(y2 - y1, x2 - x1);\n}\n","import { isNumberEqual } from '@antv/util';\nimport { nearestPoint as bezierNearestPoint, snapLength } from './bezier';\nimport { pointAt as linePointAt } from './line';\nimport type { Point } from './types';\nimport { distance, getBBoxByArray, piMod } from './util';\n\nfunction cubicAt(p0: number, p1: number, p2: number, p3: number, t: number) {\n  const onet = 1 - t; // t * t * t 的性能大概是 Math.pow(t, 3) 的三倍\n  return (\n    onet * onet * onet * p0 +\n    3 * p1 * t * onet * onet +\n    3 * p2 * t * t * onet +\n    p3 * t * t * t\n  );\n}\n\nfunction derivativeAt(\n  p0: number,\n  p1: number,\n  p2: number,\n  p3: number,\n  t: number,\n) {\n  const onet = 1 - t;\n  return (\n    3 * (onet * onet * (p1 - p0) + 2 * onet * t * (p2 - p1) + t * t * (p3 - p2))\n  );\n}\n\nfunction extrema(p0: number, p1: number, p2: number, p3: number) {\n  const a = -3 * p0 + 9 * p1 - 9 * p2 + 3 * p3;\n  const b = 6 * p0 - 12 * p1 + 6 * p2;\n  const c = 3 * p1 - 3 * p0;\n  const extremas = [];\n  let t1: number;\n  let t2: number;\n  let discSqrt: number;\n\n  if (isNumberEqual(a, 0)) {\n    if (!isNumberEqual(b, 0)) {\n      t1 = -c / b;\n      if (t1 >= 0 && t1 <= 1) {\n        extremas.push(t1);\n      }\n    }\n  } else {\n    const disc = b * b - 4 * a * c;\n    if (isNumberEqual(disc, 0)) {\n      extremas.push(-b / (2 * a));\n    } else if (disc > 0) {\n      discSqrt = Math.sqrt(disc);\n      t1 = (-b + discSqrt) / (2 * a);\n      t2 = (-b - discSqrt) / (2 * a);\n      if (t1 >= 0 && t1 <= 1) {\n        extremas.push(t1);\n      }\n      if (t2 >= 0 && t2 <= 1) {\n        extremas.push(t2);\n      }\n    }\n  }\n  return extremas;\n}\n\n// 分割贝塞尔曲线\nfunction divideCubic(\n  x1: number,\n  y1: number,\n  x2: number,\n  y2: number,\n  x3: number,\n  y3: number,\n  x4: number,\n  y4: number,\n  t: number,\n): [number, number, number, number, number, number, number, number][] {\n  // 划分点\n  const xt = cubicAt(x1, x2, x3, x4, t);\n  const yt = cubicAt(y1, y2, y3, y4, t);\n  // 计算两点之间的差值点\n  const c1 = linePointAt(x1, y1, x2, y2, t);\n  const c2 = linePointAt(x2, y2, x3, y3, t);\n  const c3 = linePointAt(x3, y3, x4, y4, t);\n  const c12 = linePointAt(c1.x, c1.y, c2.x, c2.y, t);\n  const c23 = linePointAt(c2.x, c2.y, c3.x, c3.y, t);\n  return [\n    [x1, y1, c1.x, c1.y, c12.x, c12.y, xt, yt],\n    [xt, yt, c23.x, c23.y, c3.x, c3.y, x4, y4],\n  ];\n}\n\n// 使用迭代法取贝塞尔曲线的长度，二阶和三阶分开写，更清晰和便于调试\nfunction cubicLength(\n  x1: number,\n  y1: number,\n  x2: number,\n  y2: number,\n  x3: number,\n  y3: number,\n  x4: number,\n  y4: number,\n  iterationCount: number,\n): number {\n  if (iterationCount === 0) {\n    return snapLength([x1, x2, x3, x4], [y1, y2, y3, y4]);\n  }\n  const cubics = divideCubic(x1, y1, x2, y2, x3, y3, x4, y4, 0.5);\n  const left: [\n    number,\n    number,\n    number,\n    number,\n    number,\n    number,\n    number,\n    number,\n    number,\n  ] = [...cubics[0], iterationCount - 1];\n  const right: [\n    number,\n    number,\n    number,\n    number,\n    number,\n    number,\n    number,\n    number,\n    number,\n  ] = [...cubics[1], iterationCount - 1];\n  return cubicLength(...left) + cubicLength(...right);\n}\n\nexport function box(\n  x1: number,\n  y1: number,\n  x2: number,\n  y2: number,\n  x3: number,\n  y3: number,\n  x4: number,\n  y4: number,\n) {\n  const xArr = [x1, x4];\n  const yArr = [y1, y4];\n  const xExtrema = extrema(x1, x2, x3, x4);\n  const yExtrema = extrema(y1, y2, y3, y4);\n  for (let i = 0; i < xExtrema.length; i++) {\n    xArr.push(cubicAt(x1, x2, x3, x4, xExtrema[i]));\n  }\n  for (let i = 0; i < yExtrema.length; i++) {\n    yArr.push(cubicAt(y1, y2, y3, y4, yExtrema[i]));\n  }\n  return getBBoxByArray(xArr, yArr);\n}\n\nexport function length(\n  x1: number,\n  y1: number,\n  x2: number,\n  y2: number,\n  x3: number,\n  y3: number,\n  x4: number,\n  y4: number,\n) {\n  // 迭代三次，划分成 8 段求长度\n  return cubicLength(x1, y1, x2, y2, x3, y3, x4, y4, 3);\n}\n\nexport function nearestPoint(\n  x1: number,\n  y1: number,\n  x2: number,\n  y2: number,\n  x3: number,\n  y3: number,\n  x4: number,\n  y4: number,\n  x0: number,\n  y0: number,\n  length?: number,\n) {\n  return bezierNearestPoint(\n    [x1, x2, x3, x4],\n    [y1, y2, y3, y4],\n    x0,\n    y0,\n    cubicAt,\n    length,\n  );\n}\n\nexport function pointDistance(\n  x1: number,\n  y1: number,\n  x2: number,\n  y2: number,\n  x3: number,\n  y3: number,\n  x4: number,\n  y4: number,\n  x0: number,\n  y0: number,\n  length?: number,\n) {\n  const point = nearestPoint(x1, y1, x2, y2, x3, y3, x4, y4, x0, y0, length);\n  return distance(point.x, point.y, x0, y0);\n}\n\nexport function pointAt(\n  x1: number,\n  y1: number,\n  x2: number,\n  y2: number,\n  x3: number,\n  y3: number,\n  x4: number,\n  y4: number,\n  t: number,\n): Point {\n  return {\n    x: cubicAt(x1, x2, x3, x4, t),\n    y: cubicAt(y1, y2, y3, y4, t),\n  };\n}\n\nexport function divide(\n  x1: number,\n  y1: number,\n  x2: number,\n  y2: number,\n  x3: number,\n  y3: number,\n  x4: number,\n  y4: number,\n  t: number,\n) {\n  return divideCubic(x1, y1, x2, y2, x3, y3, x4, y4, t);\n}\n\nexport function tangentAngle(\n  x1: number,\n  y1: number,\n  x2: number,\n  y2: number,\n  x3: number,\n  y3: number,\n  x4: number,\n  y4: number,\n  t: number,\n) {\n  const dx = derivativeAt(x1, x2, x3, x4, t);\n  const dy = derivativeAt(y1, y2, y3, y4, t);\n  return piMod(Math.atan2(dy, dx));\n}\n","import { pointAt, pointDistance } from './line';\nimport type { Point, PointTuple, Segment } from './types';\nimport { distance } from './util';\n\nfunction analyzePoints(points: PointTuple[]) {\n  // 计算每段的长度和总的长度\n  let totalLength = 0;\n  const segments: Segment[] = [];\n  for (let i = 0; i < points.length - 1; i++) {\n    const from = points[i];\n    const to = points[i + 1];\n    const length = distance(from[0], from[1], to[0], to[1]);\n    const seg = {\n      from,\n      to,\n      length,\n    };\n    segments.push(seg);\n    totalLength += length;\n  }\n  return { segments, totalLength };\n}\n\nexport function lengthOfSegment(points: PointTuple[]) {\n  if (points.length < 2) {\n    return 0;\n  }\n  let totalLength = 0;\n  for (let i = 0; i < points.length - 1; i++) {\n    const from = points[i];\n    const to = points[i + 1];\n    totalLength += distance(from[0], from[1], to[0], to[1]);\n  }\n  return totalLength;\n}\n\n/**\n * 按照比例在数据片段中获取点\n * @param {array} points 点的集合\n * @param {number} t 百分比 0-1\n * @return {object} 点的坐标\n */\nexport function pointAtSegments(points: PointTuple[], t: number): Point | null {\n  // 边界判断\n  if (t > 1 || t < 0 || points.length < 2) {\n    return null;\n  }\n  const { segments, totalLength } = analyzePoints(points);\n  // 多个点有可能重合\n  if (totalLength === 0) {\n    return {\n      x: points[0][0],\n      y: points[0][1],\n    };\n  }\n  // 计算比例\n  let startRatio = 0;\n  let point = null;\n  for (let i = 0; i < segments.length; i++) {\n    const seg = segments[i];\n    const { from, to } = seg;\n    const currentRatio = seg.length / totalLength;\n    if (t >= startRatio && t <= startRatio + currentRatio) {\n      const localRatio = (t - startRatio) / currentRatio;\n      point = pointAt(from[0], from[1], to[0], to[1], localRatio);\n      break;\n    }\n    startRatio += currentRatio;\n  }\n  return point;\n}\n\n/**\n * 按照比例在数据片段中获取切线的角度\n * @param {array} points 点的集合\n * @param {number} t 百分比 0-1\n */\nexport function angleAtSegments(points: PointTuple[], t: number) {\n  // 边界判断\n  if (t > 1 || t < 0 || points.length < 2) {\n    return 0;\n  }\n  const { segments, totalLength } = analyzePoints(points);\n  // 计算比例\n  let startRatio = 0;\n  let angle = 0;\n  for (let i = 0; i < segments.length; i++) {\n    const seg = segments[i];\n    const { from, to } = seg;\n    const currentRatio = seg.length / totalLength;\n    if (t >= startRatio && t <= startRatio + currentRatio) {\n      angle = Math.atan2(to[1] - from[1], to[0] - from[0]);\n      break;\n    }\n    startRatio += currentRatio;\n  }\n  return angle;\n}\n\nexport function distanceAtSegment(points: PointTuple[], x: number, y: number) {\n  let minDistance = Infinity;\n  for (let i = 0; i < points.length - 1; i++) {\n    const point = points[i];\n    const nextPoint = points[i + 1];\n    const distance = pointDistance(\n      point[0],\n      point[1],\n      nextPoint[0],\n      nextPoint[1],\n      x,\n      y,\n    );\n    if (distance < minDistance) {\n      minDistance = distance;\n    }\n  }\n  return minDistance;\n}\n","import {\n  angleAtSegments,\n  distanceAtSegment,\n  lengthOfSegment,\n  pointAtSegments,\n} from './segments';\nimport type { BBox, PointTuple } from './types';\nimport { getBBoxByArray } from './util';\n\nexport function box(points: PointTuple[]): BBox {\n  const xArr = [];\n  const yArr = [];\n  for (let i = 0; i < points.length; i++) {\n    const point = points[i];\n    xArr.push(point[0]);\n    yArr.push(point[1]);\n  }\n  return getBBoxByArray(xArr, yArr);\n}\nexport function length(points: PointTuple[]) {\n  return lengthOfSegment(points);\n}\nexport function pointAt(points: PointTuple[], t: number) {\n  return pointAtSegments(points, t);\n}\nexport function pointDistance(points: PointTuple[], x: number, y: number) {\n  return distanceAtSegment(points, x, y);\n}\nexport function tangentAngle(points: PointTuple[], t: number) {\n  return angleAtSegments(points, t);\n}\n","import { box as polylineBox } from './polyline';\nimport {\n  angleAtSegments,\n  distanceAtSegment,\n  lengthOfSegment,\n  pointAtSegments,\n} from './segments';\nimport type { PointTuple } from './types';\n\nfunction getAllPoints(points: PointTuple[]) {\n  const tmp = points.slice(0);\n  if (points.length) {\n    tmp.push(points[0]);\n  }\n  return tmp;\n}\n\nexport function box(points: PointTuple[]) {\n  return polylineBox(points);\n}\nexport function length(points: PointTuple[]) {\n  return lengthOfSegment(getAllPoints(points));\n}\nexport function pointAt(points: PointTuple[], t: number) {\n  return pointAtSegments(getAllPoints(points), t);\n}\nexport function pointDistance(points: PointTuple[], x: number, y: number) {\n  return distanceAtSegment(getAllPoints(points), x, y);\n}\nexport function tangentAngle(points: PointTuple[], t: number) {\n  return angleAtSegments(getAllPoints(points), t);\n}\n","import { isNumberEqual } from '@antv/util';\nimport { nearestPoint as nearestPointBezier } from './bezier';\nimport { pointAt as linePointAt } from './line';\nimport type { Point } from './types';\nimport { distance, getBBoxByArray, piMod } from './util';\n\n// 差值公式\nfunction quadraticAt(p0: number, p1: number, p2: number, t: number) {\n  const onet = 1 - t;\n  return onet * onet * p0 + 2 * t * onet * p1 + t * t * p2;\n}\n\n// 求极值\nfunction extrema(p0: number, p1: number, p2: number) {\n  const a = p0 + p2 - 2 * p1;\n  if (isNumberEqual(a, 0)) {\n    return [0.5];\n  }\n  const rst = (p0 - p1) / a;\n  if (rst <= 1 && rst >= 0) {\n    return [rst];\n  }\n  return [];\n}\n\nfunction derivativeAt(p0: number, p1: number, p2: number, t: number) {\n  return 2 * (1 - t) * (p1 - p0) + 2 * t * (p2 - p1);\n}\n\n// 分割贝塞尔曲线\nfunction divideQuadratic(\n  x1: number,\n  y1: number,\n  x2: number,\n  y2: number,\n  x3: number,\n  y3: number,\n  t: number,\n) {\n  // 划分点\n  const xt = quadraticAt(x1, x2, x3, t);\n  const yt = quadraticAt(y1, y2, y3, t);\n\n  // 分割的第一条曲线的控制点\n  const controlPoint1 = linePointAt(x1, y1, x2, y2, t);\n  // 分割的第二条曲线的控制点\n  const controlPoint2 = linePointAt(x2, y2, x3, y3, t);\n  return [\n    [x1, y1, controlPoint1.x, controlPoint1.y, xt, yt],\n    [xt, yt, controlPoint2.x, controlPoint2.y, x3, y3],\n  ];\n}\n\n// 使用迭代法取贝塞尔曲线的长度\nfunction quadraticLength(\n  x1: number,\n  y1: number,\n  x2: number,\n  y2: number,\n  x3: number,\n  y3: number,\n  iterationCount: number,\n): number {\n  if (iterationCount === 0) {\n    return (\n      (distance(x1, y1, x2, y2) +\n        distance(x2, y2, x3, y3) +\n        distance(x1, y1, x3, y3)) /\n      2\n    );\n  }\n  const quadratics = divideQuadratic(x1, y1, x2, y2, x3, y3, 0.5);\n  const left = quadratics[0] as [\n    number,\n    number,\n    number,\n    number,\n    number,\n    number,\n    number,\n  ];\n  const right = quadratics[1] as [\n    number,\n    number,\n    number,\n    number,\n    number,\n    number,\n    number,\n  ];\n  left.push(iterationCount - 1);\n  right.push(iterationCount - 1);\n  return quadraticLength(...left) + quadraticLength(...right);\n}\n\nexport function box(\n  x1: number,\n  y1: number,\n  x2: number,\n  y2: number,\n  x3: number,\n  y3: number,\n) {\n  const xExtrema = extrema(x1, x2, x3)[0];\n  const yExtrema = extrema(y1, y2, y3)[0];\n  // 控制点不加入 box 的计算\n  const xArr = [x1, x3];\n  const yArr = [y1, y3];\n  if (xExtrema !== undefined) {\n    xArr.push(quadraticAt(x1, x2, x3, xExtrema));\n  }\n  if (yExtrema !== undefined) {\n    yArr.push(quadraticAt(y1, y2, y3, yExtrema));\n  }\n  return getBBoxByArray(xArr, yArr);\n}\n\nexport function length(\n  x1: number,\n  y1: number,\n  x2: number,\n  y2: number,\n  x3: number,\n  y3: number,\n) {\n  return quadraticLength(x1, y1, x2, y2, x3, y3, 3);\n}\n\nexport function nearestPoint(\n  x1: number,\n  y1: number,\n  x2: number,\n  y2: number,\n  x3: number,\n  y3: number,\n  x0: number,\n  y0: number,\n) {\n  return nearestPointBezier([x1, x2, x3], [y1, y2, y3], x0, y0, quadraticAt);\n}\n\nexport function pointDistance(\n  x1: number,\n  y1: number,\n  x2: number,\n  y2: number,\n  x3: number,\n  y3: number,\n  x0: number,\n  y0: number,\n) {\n  const point = nearestPoint(x1, y1, x2, y2, x3, y3, x0, y0);\n  return distance(point.x, point.y, x0, y0);\n}\n\n// interpolationAt: quadraticAt,\nexport function pointAt(\n  x1: number,\n  y1: number,\n  x2: number,\n  y2: number,\n  x3: number,\n  y3: number,\n  t: number,\n): Point {\n  return {\n    x: quadraticAt(x1, x2, x3, t),\n    y: quadraticAt(y1, y2, y3, t),\n  };\n}\n\nexport function divide(\n  x1: number,\n  y1: number,\n  x2: number,\n  y2: number,\n  x3: number,\n  y3: number,\n  t: number,\n) {\n  return divideQuadratic(x1, y1, x2, y2, x3, y3, t);\n}\n\nexport function tangentAngle(\n  x1: number,\n  y1: number,\n  x2: number,\n  y2: number,\n  x3: number,\n  y3: number,\n  t: number,\n) {\n  const dx = derivativeAt(x1, x2, x3, t);\n  const dy = derivativeAt(y1, y2, y3, t);\n  const angle = Math.atan2(dy, dx);\n  return piMod(angle);\n}\n"],"names":["distance","x1","y1","x2","y2","dx","dy","Math","sqrt","getBBoxByArray","xArr","yArr","minX","min","apply","_toConsumableArray","minY","maxX","max","maxY","x","y","width","height","piMod","angle","PI","copysign","v1","v2","absv","abs","nearestPoint","rx","ry","x0","y0","a","b","relativeX","relativeY","px","py","squareA","squareB","t","nearestX","nearestY","i","cos","sin","ex","pow","ey","rx1","ry1","qx","qy","r","hypot","q","delta_c","asin","delta_t","derivativeXAt","cx","cy","xRotation","startAngle","endAngle","derivativeYAt","xExtrema","atan","tan","yExtrema","xAt","yAt","getAngle","atan2","getPoint","rotate","box","xDim","Infinity","xs","xAngle","push","length","yDim","ys","yAngle","relativeVector","_relativeVector","_slicedToArray","relativePoint","ellipseNearestPoint","vector","tangentAngle","EPSILON","tCallback","d","v0","segNum","increaseRate","interval","_t","concat","d1","count","prev","next","d2","snapLength","totalLength","nextX","nextY","pointAt","pointDistance","cross","lengthSquare","pointToLine","vec2","exactEquals","u","normalize","dot","cubicAt","p0","p1","p2","p3","onet","derivativeAt","extrema","c","extremas","t1","t2","discSqrt","isNumberEqual","disc","divideCubic","x3","y3","x4","y4","xt","yt","c1","linePointAt","c2","c3","c12","c23","cubicLength","iterationCount","cubics","left","right","bezierNearestPoint","point","analyzePoints","points","segments","from","to","seg","lengthOfSegment","pointAtSegments","_analyzePoints","startRatio","currentRatio","localRatio","angleAtSegments","_analyzePoints2","distanceAtSegment","minDistance","nextPoint","getAllPoints","tmp","slice","polylineBox","quadraticAt","rst","divideQuadratic","controlPoint1","controlPoint2","quadraticLength","quadratics","undefined","nearestPointBezier"],"mappings":"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"}